name: Node.js CI/CD with Security Scanning

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
        
    - name: Run client tests
      working-directory: ./client
      run: npm test
      
    - name: Run server tests
      working-directory: ./server
      run: npm test
      
    - name: Run security audit
      run: |
        npm audit --production
        cd client && npm audit --production
        cd ../server && npm audit --production

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Snyk Security Scan
      uses: snyk/actions/node@master
      with:
        command: monitor
        args: --all-projects --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        
    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ddos-protection-app'
        format: 'HTML'
        fail_on_cvss: 7
        
  docker-build:
    needs: security-scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/ddos-protection-app:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/ddos-protection-app:${{ github.sha }}
        build-args: |
          NODE_ENV=production
        
  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --service ${{ secrets.ECS_SERVICE }} \
          --force-new-deployment \
          --region ${{ secrets.AWS_REGION }}
